{"version":3,"file":"confirmation.min.js","sources":["../src/confirmation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Confirms the deletion of an entry.\n *\n * @module     tool_devcourse/confirmation\n * @copyright  2025 Diego Monroy <diego.monroy@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as str from 'core/str';\nimport * as notification from 'core/notification';\nimport * as ajax from 'core/ajax';\nimport * as templates from 'core/templates';\n\n/**\n * Displays a confirmation dialog to the user before deleting an entry.\n * If the user confirms, proceeds to delete the entry and update the entries list.\n *\n * @param {number|string} id - The identifier of the entry to be deleted.\n * @param {Array} entriesList - The list of entries to update after deletion.\n */\nexport const confirmDeletion = (id, entriesList) => {\n    str.get_strings([\n            {key: 'delete'},\n            {key: 'confirmdeleteentry', component: 'tool_devcourse'},\n            {key: 'yes'},\n            {key: 'no'}\n        ])\n        .then(function(strings) {\n            return notification.confirm(strings[0], strings[1], strings[2], strings[3], function() {\n                processDeleteEntry(id, entriesList);\n            });\n        })\n        .catch(notification.exception);\n};\n\n/**\n * Deletes an entry by its ID and reloads the list of entries for a given course.\n *\n * @param {number|string} id - The ID of the entry to delete.\n * @param {HTMLElement} entriesList - The DOM element representing the list, which must have a 'data-courseid' attribute.\n */\nexport const processDeleteEntry = (id, entriesList) => {\n    let courseid = entriesList.dataset.courseid;\n    let requests = ajax.call([\n        {\n            methodname: 'tool_devcourse_delete_entry',\n            args: {id: id}\n        },\n        {\n            methodname: 'tool_devcourse_list_entries',\n            args: {courseid: courseid}\n        }\n    ]);\n    requests[1].then(function(data) {\n        // We reload DOM.\n        return reloadList(data, entriesList);\n    })\n    .catch(notification.exception);\n};\n\n/**\n * Loads and renders the entries list\n *\n * @method loadList\n * @param {Object} data\n * @param {Object} entriesList\n */\nexport const reloadList = (data, entriesList) => {\n    templates.render('tool_devcourse/entries_list', data)\n    .then(function(html, js) {\n        return templates.replaceNodeContents(entriesList, html, js);\n    })\n    .catch(notification.exception);\n};\n\n/**\n * Attaches a click handler to all elements matching the selector to trigger confirmation.\n * @param {string} selector - CSS selector for elements that trigger the confirmation dialog.\n */\nexport const clickHandler = (selector) => {\n    let items = document.querySelectorAll(selector);\n\n    items.forEach((item) => {\n        item.addEventListener('click', (e) => {\n            e.preventDefault();\n            let id = item.dataset.entryid;\n            let entriesList = item.closest('.entries_list');\n            confirmDeletion(id, entriesList);\n        });\n    });\n};\n\n/**\n * Initializes the deletion confirmation functionality for selected elements.\n * @param {string} selector - CSS selector for elements that trigger the confirmation dialog.\n */\nexport const init = (selector) => {\n    clickHandler(selector);\n};\n"],"names":["confirmDeletion","id","entriesList","str","get_strings","key","component","then","strings","notification","confirm","processDeleteEntry","catch","exception","courseid","dataset","ajax","call","methodname","args","data","reloadList","templates","render","html","js","replaceNodeContents","clickHandler","selector","document","querySelectorAll","forEach","item","addEventListener","e","preventDefault","entryid","closest"],"mappings":";;;;;;;2VAmCaA,gBAAkB,CAACC,GAAIC,eAChCC,IAAIC,YAAY,CACR,CAACC,IAAK,UACN,CAACA,IAAK,qBAAsBC,UAAW,kBACvC,CAACD,IAAK,OACN,CAACA,IAAK,QAETE,MAAK,SAASC,gBACJC,aAAaC,QAAQF,QAAQ,GAAIA,QAAQ,GAAIA,QAAQ,GAAIA,QAAQ,IAAI,WACxEG,mBAAmBV,GAAIC,mBAG9BU,MAAMH,aAAaI,2DASfF,mBAAqB,CAACV,GAAIC,mBAC/BY,SAAWZ,YAAYa,QAAQD,SACpBE,KAAKC,KAAK,CACrB,CACIC,WAAY,8BACZC,KAAM,CAAClB,GAAIA,KAEf,CACIiB,WAAY,8BACZC,KAAM,CAACL,SAAUA,aAGhB,GAAGP,MAAK,SAASa,aAEfC,WAAWD,KAAMlB,gBAE3BU,MAAMH,aAAaI,iEAUXQ,WAAa,CAACD,KAAMlB,eAC7BoB,UAAUC,OAAO,8BAA+BH,MAC/Cb,MAAK,SAASiB,KAAMC,WACVH,UAAUI,oBAAoBxB,YAAasB,KAAMC,OAE3Db,MAAMH,aAAaI,iDAOXc,aAAgBC,WACbC,SAASC,iBAAiBF,UAEhCG,SAASC,OACXA,KAAKC,iBAAiB,SAAUC,IAC5BA,EAAEC,qBACElC,GAAK+B,KAAKjB,QAAQqB,QAClBlC,YAAc8B,KAAKK,QAAQ,iBAC/BrC,gBAAgBC,GAAIC,qEASX0B,WACjBD,aAAaC"}