{"version":3,"file":"confirmation.min.js","sources":["../src/confirmation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Confirms the deletion of an entry\n *\n * @module     tool_devcourse/confirmation\n * @copyright  2025 Diego Monroy <diego.monroy@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as str from 'core/str';\nimport * as notification from 'core/notification';\nimport * as ajax from 'core/ajax';\nimport * as templates from 'core/templates';\n\n/**\n * Displays a confirmation dialog to the user before deleting an entry.\n * If the user confirms, proceeds to delete the entry and update the entries list.\n *\n * @param {number|string} id - The identifier of the entry to be deleted.\n * @param {Array} entriesList - The list of entries to update after deletion.\n */\nexport const confirmDeletion = (id, entriesList) => {\n    let pluginname = 'tool_devcourse';\n\n    str.get_strings([\n        {key: 'delete'},\n        {key: 'confirmdeleteentry', component: pluginname},\n        {key: 'yes'},\n        {key: 'no'}\n    ])\n    .then(strings => {\n        // Show confirmation dialog. If user confirms, redirect to the given URL.\n        notification.confirm(strings[0], strings[1], strings[2], strings[3], () => {\n            processDeleteEntry(id, entriesList);\n        });\n        return null;\n    })\n    // Handle any errors that occur during the string retrieval or confirmation dialog.\n    .catch(notification.exception);\n};\n\n/**\n * Calls the services to delete the entry and retrieve the entries list\n *\n * @method processDeleteEntry\n * @param {Number} id\n * @param {Object} entriesList\n */\nexport const processDeleteEntry = (id, entriesList) => {\n    const courseid = entriesList.dataset.courseid;\n    // eslint-disable-next-line\n    console.log(`Deleting entry ${id} from course ${courseid}`);\n    ajax.call([\n        {\n            methodname: 'tool_devcourse_delete_entry',\n            args: {id: id}\n        }\n    ])[0]\n        .then(() => {\n            // eslint-disable-next-line\n            console.log(`Entry ${id} deleted successfully.`);\n            return ajax.call([\n                {\n                    methodname: 'tool_devcourse_list_entries',\n                    args: {courseid: courseid}\n                }\n            ])[0];\n        })\n        .then(data => {\n            // eslint-disable-next-line\n            console.log(`DATA: ${JSON.stringify(data)}`, entriesList);\n            loadList(data, entriesList);\n            return null;\n        })\n        .catch(notification.exception);\n};\n\n/**\n * Loads and renders the entries list\n *\n * @method loadList\n * @param {Object} data\n * @param {Object} entriesList\n */\nexport const loadList = (data, entriesList) => {\n    templates.render('tool_devcourse/entries_list', data)\n        .then(([html]) => {\n            entriesList.replaceWith(html);\n            return null;\n        })\n        .catch(notification.exception);\n};\n\n/**\n * Attaches a click handler to all elements matching the selector to trigger confirmation.\n * @param {string} selector - CSS selector for elements that trigger the confirmation dialog.\n */\nexport const clickHandler = (selector) => {\n    const items = document.querySelectorAll(selector);\n\n    items.forEach((item) => {\n        item.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            const id = item.dataset.entryid;\n            const entriesList = item.closest('.entries_list');\n            confirmDeletion(id, entriesList);\n        });\n    });\n};\n\n/**\n * Initializes the deletion confirmation functionality for selected elements.\n * @param {string} selector - CSS selector for elements that trigger the confirmation dialog.\n */\nexport const init = (selector) => {\n    clickHandler(selector);\n};\n"],"names":["confirmDeletion","id","entriesList","str","get_strings","key","component","then","strings","notification","confirm","processDeleteEntry","catch","exception","courseid","dataset","console","log","ajax","call","methodname","args","data","JSON","stringify","loadList","templates","render","_ref","html","replaceWith","clickHandler","selector","document","querySelectorAll","forEach","item","addEventListener","e","preventDefault","entryid","closest"],"mappings":";;;;;;;yVAmCaA,gBAAkB,CAACC,GAAIC,eAGhCC,IAAIC,YAAY,CACZ,CAACC,IAAK,UACN,CAACA,IAAK,qBAAsBC,UAJf,kBAKb,CAACD,IAAK,OACN,CAACA,IAAK,QAETE,MAAKC,UAEFC,aAAaC,QAAQF,QAAQ,GAAIA,QAAQ,GAAIA,QAAQ,GAAIA,QAAQ,IAAI,KACjEG,mBAAmBV,GAAIC,gBAEpB,QAGVU,MAAMH,aAAaI,2DAUXF,mBAAqB,CAACV,GAAIC,qBAC7BY,SAAWZ,YAAYa,QAAQD,SAErCE,QAAQC,6BAAsBhB,2BAAkBa,WAChDI,KAAKC,KAAK,CACN,CACIC,WAAY,8BACZC,KAAM,CAACpB,GAAIA,OAEhB,GACEM,MAAK,KAEFS,QAAQC,oBAAahB,8BACdiB,KAAKC,KAAK,CACb,CACIC,WAAY,8BACZC,KAAM,CAACP,SAAUA,aAEtB,MAENP,MAAKe,OAEFN,QAAQC,oBAAaM,KAAKC,UAAUF,OAASpB,aAC7CuB,SAASH,KAAMpB,aACR,QAEVU,MAAMH,aAAaI,iEAUfY,SAAW,CAACH,KAAMpB,eAC3BwB,UAAUC,OAAO,8BAA+BL,MAC3Cf,MAAKqB,WAAEC,kBACJ3B,YAAY4B,YAAYD,MACjB,QAEVjB,MAAMH,aAAaI,6CAOfkB,aAAgBC,WACXC,SAASC,iBAAiBF,UAElCG,SAASC,OACXA,KAAKC,iBAAiB,SAAUC,IAC5BA,EAAEC,uBACItC,GAAKmC,KAAKrB,QAAQyB,QAClBtC,YAAckC,KAAKK,QAAQ,iBACjCzC,gBAAgBC,GAAIC,qEASX8B,WACjBD,aAAaC"}