{"version":3,"file":"confirmation.min.js","sources":["../src/confirmation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Confirms the deletion of an entry\n *\n * @module     tool_devcourse/confirmation\n * @copyright  2025 Diego Monroy <diego.monroy@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as str from 'core/str';\nimport * as notification from 'core/notification';\nimport * as ajax from 'core/ajax';\nimport * as templates from 'core/templates';\n\n/**\n * Displays a confirmation dialog to the user before deleting an entry.\n * If the user confirms, proceeds to delete the entry and update the entries list.\n *\n * @param {number|string} id - The identifier of the entry to be deleted.\n * @param {Array} entriesList - The list of entries to update after deletion.\n */\nexport const confirmDeletion = (id, entriesList) => {\n    str.get_strings([\n        {key: 'delete'},\n        {key: 'confirmdeleteentry', component: 'tool_devcourse'},\n        {key: 'yes'},\n        {key: 'no'}\n    ])\n    .then(strings => {\n        // Show confirmation dialog. If user confirms, redirect to the given URL.\n        notification.confirm(strings[0], strings[1], strings[2], strings[3], () => {\n            processDeleteEntry(id, entriesList);\n        });\n        return null;\n    })\n    // Handle any errors that occur during the string retrieval or confirmation dialog.\n    .catch(notification.exception);\n};\n\n/**\n * Deletes an entry by its ID and reloads the list of entries for a given course.\n *\n * @param {number|string} id - The ID of the entry to delete.\n * @param {HTMLElement} list - The DOM element representing the list, which must have a 'data-courseid' attribute.\n */\nexport const processDeleteEntry = function(id, list) {\n    var courseid = list.getAttribute('data-courseid');\n    // Call the AJAX method to delete the entry and then reload the list.\n    var requests = ajax.call([\n        {\n            methodname: 'tool_devcourse_delete_entry',\n            args: {id: id}\n        },\n        {\n            methodname: 'tool_devcourse_list_entries',\n            args: {courseid: courseid}\n        }\n    ]);\n    requests[1].done(function(data) {\n        // We reload DOM.\n        reloadList(data, list);\n    }).fail(notification.exception);\n};\n\n/**\n * Replaces a given list element in the DOM with new content rendered from a template and data.\n *\n * @param {Object} data - The data to be passed to the template renderer.\n * @param {HTMLElement} list - The DOM element representing the list to be replaced.\n */\nexport const reloadList = function(data, list) {\n    templates.render('tool_devcourse/entries_list', data).done(function(html) {\n        // We create a temporary container and assign the HTML.\n        const temp = document.createElement('div');\n        temp.innerHTML = html;\n        // Insert all child nodes before removing the original.\n        const parent = list.parentNode;\n        while (temp.firstChild) {\n            parent.insertBefore(temp.firstChild, list);\n        }\n        // Remove the original element.\n        parent.removeChild(list);\n    });\n};\n\n/**\n * Attaches a click handler to all elements matching the selector to trigger confirmation.\n * @param {string} selector - CSS selector for elements that trigger the confirmation dialog.\n */\nexport const clickHandler = (selector) => {\n    const items = document.querySelectorAll(selector);\n\n    // Attach click event listeners to each item.\n    items.forEach((item) => {\n        item.addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            const id = item.dataset.entryid;\n            const entriesList = item.closest('.entries_list');\n            confirmDeletion(id, entriesList);\n        });\n    });\n};\n\n/**\n * Initializes the deletion confirmation functionality for selected elements.\n * @param {string} selector - CSS selector for elements that trigger the confirmation dialog.\n */\nexport const init = (selector) => {\n    clickHandler(selector);\n};\n"],"names":["confirmDeletion","id","entriesList","str","get_strings","key","component","then","strings","notification","confirm","processDeleteEntry","catch","exception","list","courseid","getAttribute","ajax","call","methodname","args","done","data","reloadList","fail","templates","render","html","temp","document","createElement","innerHTML","parent","parentNode","firstChild","insertBefore","removeChild","clickHandler","selector","querySelectorAll","forEach","item","addEventListener","e","preventDefault","dataset","entryid","closest"],"mappings":";;;;;;;2VAmCaA,gBAAkB,CAACC,GAAIC,eAChCC,IAAIC,YAAY,CACZ,CAACC,IAAK,UACN,CAACA,IAAK,qBAAsBC,UAAW,kBACvC,CAACD,IAAK,OACN,CAACA,IAAK,QAETE,MAAKC,UAEFC,aAAaC,QAAQF,QAAQ,GAAIA,QAAQ,GAAIA,QAAQ,GAAIA,QAAQ,IAAI,KACjEG,mBAAmBV,GAAIC,gBAEpB,QAGVU,MAAMH,aAAaI,2DASXF,mBAAqB,SAASV,GAAIa,UACvCC,SAAWD,KAAKE,aAAa,iBAElBC,KAAKC,KAAK,CACrB,CACIC,WAAY,8BACZC,KAAM,CAACnB,GAAIA,KAEf,CACIkB,WAAY,8BACZC,KAAM,CAACL,SAAUA,aAGhB,GAAGM,MAAK,SAASC,MAEtBC,WAAWD,KAAMR,SAClBU,KAAKf,aAAaI,iEASZU,WAAa,SAASD,KAAMR,MACrCW,UAAUC,OAAO,8BAA+BJ,MAAMD,MAAK,SAASM,YAE1DC,KAAOC,SAASC,cAAc,OACpCF,KAAKG,UAAYJ,WAEXK,OAASlB,KAAKmB,gBACbL,KAAKM,YACRF,OAAOG,aAAaP,KAAKM,WAAYpB,MAGzCkB,OAAOI,YAAYtB,+CAQduB,aAAgBC,WACXT,SAASU,iBAAiBD,UAGlCE,SAASC,OACXA,KAAKC,iBAAiB,SAAUC,IAC5BA,EAAEC,uBACI3C,GAAKwC,KAAKI,QAAQC,QAClB5C,YAAcuC,KAAKM,QAAQ,iBACjC/C,gBAAgBC,GAAIC,qEASXoC,WACjBD,aAAaC"}