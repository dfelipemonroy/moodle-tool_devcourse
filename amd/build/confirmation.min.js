define("tool_devcourse/confirmation",["exports","core/str","core/notification","core/ajax","core/templates"],(function(_exports,str,notification,ajax,templates){function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}return newObj.default=obj,cache&&cache.set(obj,newObj),newObj}
/**
   * Confirms the deletion of an entry
   *
   * @module     tool_devcourse/confirmation
   * @copyright  2025 Diego Monroy <diego.monroy@moodle.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.processDeleteEntry=_exports.loadList=_exports.init=_exports.confirmDeletion=_exports.clickHandler=void 0,str=_interopRequireWildcard(str),notification=_interopRequireWildcard(notification),ajax=_interopRequireWildcard(ajax),templates=_interopRequireWildcard(templates);const confirmDeletion=(id,entriesList)=>{str.get_strings([{key:"delete"},{key:"confirmdeleteentry",component:"tool_devcourse"},{key:"yes"},{key:"no"}]).then((strings=>(notification.confirm(strings[0],strings[1],strings[2],strings[3],(()=>{processDeleteEntry(id,entriesList)})),null))).catch(notification.exception)};_exports.confirmDeletion=confirmDeletion;const processDeleteEntry=(id,entriesList)=>{const courseid=entriesList.dataset.courseid;console.log("Deleting entry ".concat(id," from course ").concat(courseid)),ajax.call([{methodname:"tool_devcourse_delete_entry",args:{id:id}}])[0].then((()=>(console.log("Entry ".concat(id," deleted successfully.")),ajax.call([{methodname:"tool_devcourse_list_entries",args:{courseid:courseid}}])[0]))).then((data=>(console.log("DATA: ".concat(JSON.stringify(data)),entriesList),loadList(data,entriesList),null))).catch(notification.exception)};_exports.processDeleteEntry=processDeleteEntry;const loadList=(data,entriesList)=>{templates.render("tool_devcourse/entries_list",data).then((_ref=>{let[html]=_ref;return entriesList.replaceWith(html),null})).catch(notification.exception)};_exports.loadList=loadList;const clickHandler=selector=>{document.querySelectorAll(selector).forEach((item=>{item.addEventListener("click",(e=>{e.preventDefault();const id=item.dataset.entryid,entriesList=item.closest(".entries_list");confirmDeletion(id,entriesList)}))}))};_exports.clickHandler=clickHandler;_exports.init=selector=>{clickHandler(selector)}}));

//# sourceMappingURL=confirmation.min.js.map